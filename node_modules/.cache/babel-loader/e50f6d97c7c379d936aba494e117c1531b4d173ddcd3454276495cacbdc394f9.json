{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { LanguagesEnum } from \"../types/main-page\";\nimport { sensitiveWords } from \"../data/sensitive-words\";\nimport useLanguage from \"./useLanguage\";\nconst useTextIsHidden = lang => {\n  _s();\n  const {\n    mainLang\n  } = useLanguage(lang);\n  const defaultText = localStorage.getItem(lang === LanguagesEnum.Thai ? \"text-hidden-th\" : lang === LanguagesEnum.Chinese ? \"text-hidden-zh\" : lang === LanguagesEnum.German ? \"text-hidden-de\" : \"text-hidden\") || \"\";\n  const [text, setText] = useState(defaultText);\n  const [warningText, setWarningText] = useState(\"\");\n  const [hasSensitiveWords, setHasSensitiveWords] = useState(false);\n  useEffect(() => {\n    if (sensitiveWords.some(word => text.toUpperCase().includes(word.toUpperCase()))) {\n      setHasSensitiveWords(true);\n      setWarningText(mainLang.language.warning_text);\n    } else {\n      setHasSensitiveWords(false);\n    }\n  }, [hasSensitiveWords, text]);\n  return {\n    hasSensitiveWords,\n    text,\n    warningText,\n    setText\n  };\n};\n_s(useTextIsHidden, \"MyvWeQKsEsbsdx1RL8eR+vqXYIY=\", false, function () {\n  return [useLanguage];\n});\nexport default useTextIsHidden;","map":{"version":3,"names":["useEffect","useState","LanguagesEnum","sensitiveWords","useLanguage","useTextIsHidden","lang","_s","mainLang","defaultText","localStorage","getItem","Thai","Chinese","German","text","setText","warningText","setWarningText","hasSensitiveWords","setHasSensitiveWords","some","word","toUpperCase","includes","language","warning_text"],"sources":["/Users/mark/Documents/GitHub/lets-guess/src/hooks/useTextIsHidden.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { LanguagesEnum } from \"../types/main-page\"\nimport { sensitiveWords } from \"../data/sensitive-words\"\nimport useLanguage from \"./useLanguage\"\n\nconst useTextIsHidden = (lang: string | undefined) => {\n\n  const { mainLang } = useLanguage(lang)\n\n  const defaultText = \n    localStorage.getItem(\n      lang === LanguagesEnum.Thai ? \"text-hidden-th\" : \n      lang === LanguagesEnum.Chinese ? \"text-hidden-zh\" :\n      lang === LanguagesEnum.German ? \"text-hidden-de\" :\n      \"text-hidden\"\n    ) || \"\"\n\n  const [text, setText] = useState(defaultText)\n  const [warningText, setWarningText] = useState(\"\")\n  const [hasSensitiveWords, setHasSensitiveWords] = useState(false)\n\n  useEffect(() => {\n    if (sensitiveWords.some(word => text.toUpperCase().includes(word.toUpperCase()))){\n      setHasSensitiveWords(true)\n      setWarningText(mainLang.language.warning_text)\n    } else {\n      setHasSensitiveWords(false)\n    }\n  }, [hasSensitiveWords, text])\n\n  return { hasSensitiveWords, text, warningText, setText }\n}\n\nexport default useTextIsHidden"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,oBAAoB;AAClD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,OAAOC,WAAW,MAAM,eAAe;AAEvC,MAAMC,eAAe,GAAIC,IAAwB,IAAK;EAAAC,EAAA;EAEpD,MAAM;IAAEC;EAAS,CAAC,GAAGJ,WAAW,CAACE,IAAI,CAAC;EAEtC,MAAMG,WAAW,GACfC,YAAY,CAACC,OAAO,CAClBL,IAAI,KAAKJ,aAAa,CAACU,IAAI,GAAG,gBAAgB,GAC9CN,IAAI,KAAKJ,aAAa,CAACW,OAAO,GAAG,gBAAgB,GACjDP,IAAI,KAAKJ,aAAa,CAACY,MAAM,GAAG,gBAAgB,GAChD,aACF,CAAC,IAAI,EAAE;EAET,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAACQ,WAAW,CAAC;EAC7C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAEjED,SAAS,CAAC,MAAM;IACd,IAAIG,cAAc,CAACkB,IAAI,CAACC,IAAI,IAAIP,IAAI,CAACQ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAC;MAC/EH,oBAAoB,CAAC,IAAI,CAAC;MAC1BF,cAAc,CAACV,QAAQ,CAACiB,QAAQ,CAACC,YAAY,CAAC;IAChD,CAAC,MAAM;MACLN,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC,EAAE,CAACD,iBAAiB,EAAEJ,IAAI,CAAC,CAAC;EAE7B,OAAO;IAAEI,iBAAiB;IAAEJ,IAAI;IAAEE,WAAW;IAAED;EAAQ,CAAC;AAC1D,CAAC;AAAAT,EAAA,CA1BKF,eAAe;EAAA,QAEED,WAAW;AAAA;AA0BlC,eAAeC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
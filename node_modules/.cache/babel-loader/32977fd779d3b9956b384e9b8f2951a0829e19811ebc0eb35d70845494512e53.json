{"ast":null,"code":"var _jsxFileName = \"/Users/mark/Documents/GitHub/lets-guess/src/pages/game-page.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { Background } from \"../types/main-page\";\nimport useChangeMode from \"../hooks/useChangeMode\";\nimport useLanguage from \"../hooks/useLanguage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  var _mainLang$sortedCate$;\n  const {\n    lang,\n    cate\n  } = useParams();\n  const {\n    checkIfDarkMode\n  } = useChangeMode();\n  const {\n    mainLang\n  } = useLanguage(lang);\n  document.body.style.backgroundColor = checkIfDarkMode ? Background.BlueDark : Background.Blue;\n  const words = (_mainLang$sortedCate$ = mainLang.sortedCate.find(item => item.link == `/${cate}`)) === null || _mainLang$sortedCate$ === void 0 ? void 0 : _mainLang$sortedCate$.words;\n  const randomWord = words && words[Math.floor(Math.random() * words.length)];\n  const [word, setWord] = useState(randomWord);\n  const [gameData, setGameData] = useState({\n    timer: localStorage.getItem(\"timer-continue\"),\n    point: localStorage.getItem(\"point\")\n  });\n  const answer = type => {\n    switch (type) {\n      case 'correct':\n    }\n  };\n  console.log(localStorage.getItem(\"timer-continue\"));\n  const afterGameTexts = ['Having fun?', 'Better luck next time', 'Wanna play again?', 'Hope you have enjoyed the game'];\n  const [afterGameText, setAfterGameText] = useState(afterGameTexts[Math.floor(Math.random() * afterGameTexts.length)]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"IhumB/epahqDX2stKNcsTzFuNvs=\", false, function () {\n  return [useParams, useChangeMode, useLanguage];\n});\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["useParams","useState","Background","useChangeMode","useLanguage","jsxDEV","_jsxDEV","GamePage","_s","_mainLang$sortedCate$","lang","cate","checkIfDarkMode","mainLang","document","body","style","backgroundColor","BlueDark","Blue","words","sortedCate","find","item","link","randomWord","Math","floor","random","length","word","setWord","gameData","setGameData","timer","localStorage","getItem","point","answer","type","console","log","afterGameTexts","afterGameText","setAfterGameText","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mark/Documents/GitHub/lets-guess/src/pages/game-page.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\nimport { Background } from \"../types/main-page\"\nimport useChangeMode from \"../hooks/useChangeMode\"\nimport useLanguage from \"../hooks/useLanguage\"\n\nconst GamePage = () => {\n\n  const { lang, cate } = useParams()\n  const { checkIfDarkMode } = useChangeMode()\n  const { mainLang } = useLanguage(lang)\n\n  document.body.style.backgroundColor = checkIfDarkMode ? Background.BlueDark : Background.Blue\n\n  const words = mainLang.sortedCate.find(item => item.link == `/${cate}`)?.words\n  const randomWord = words && words[Math.floor(Math.random() * words.length)]\n\n  const [word, setWord] = useState(randomWord)\n\n  const [gameData, setGameData] = useState({\n    timer: localStorage.getItem(\"timer-continue\"),\n    point: localStorage.getItem(\"point\")\n  })\n\n  const answer = (type: string) => {\n    switch (type){\n      case 'correct':\n\n    }\n  }\n\n  console.log(localStorage.getItem(\"timer-continue\"))\n\n  const afterGameTexts = ['Having fun?','Better luck next time','Wanna play again?','Hope you have enjoyed the game']\n  const [afterGameText, setAfterGameText] = useState(afterGameTexts[Math.floor(Math.random() * afterGameTexts.length)])\n\n  return (\n    <div className=\"App\">\n\n    </div>\n  )\n}\n\nexport default GamePage"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,SAAoBC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,WAAW,MAAM,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA;EAErB,MAAM;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAGX,SAAS,CAAC,CAAC;EAClC,MAAM;IAAEY;EAAgB,CAAC,GAAGT,aAAa,CAAC,CAAC;EAC3C,MAAM;IAAEU;EAAS,CAAC,GAAGT,WAAW,CAACM,IAAI,CAAC;EAEtCI,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAGL,eAAe,GAAGV,UAAU,CAACgB,QAAQ,GAAGhB,UAAU,CAACiB,IAAI;EAE7F,MAAMC,KAAK,IAAAX,qBAAA,GAAGI,QAAQ,CAACQ,UAAU,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,IAAK,IAAGb,IAAK,EAAC,CAAC,cAAAF,qBAAA,uBAAzDA,qBAAA,CAA2DW,KAAK;EAC9E,MAAMK,UAAU,GAAGL,KAAK,IAAIA,KAAK,CAACM,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,KAAK,CAACS,MAAM,CAAC,CAAC;EAE3E,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG9B,QAAQ,CAACwB,UAAU,CAAC;EAE5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGhC,QAAQ,CAAC;IACvCiC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAC7CC,KAAK,EAAEF,YAAY,CAACC,OAAO,CAAC,OAAO;EACrC,CAAC,CAAC;EAEF,MAAME,MAAM,GAAIC,IAAY,IAAK;IAC/B,QAAQA,IAAI;MACV,KAAK,SAAS;IAEhB;EACF,CAAC;EAEDC,OAAO,CAACC,GAAG,CAACN,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;EAEnD,MAAMM,cAAc,GAAG,CAAC,aAAa,EAAC,uBAAuB,EAAC,mBAAmB,EAAC,gCAAgC,CAAC;EACnH,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG3C,QAAQ,CAACyC,cAAc,CAAChB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGc,cAAc,CAACb,MAAM,CAAC,CAAC,CAAC;EAErH,oBACEvB,OAAA;IAAKuC,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEf,CAAC;AAEV,CAAC;AAAAzC,EAAA,CAnCKD,QAAQ;EAAA,QAEWP,SAAS,EACJG,aAAa,EACpBC,WAAW;AAAA;AAAA8C,EAAA,GAJ5B3C,QAAQ;AAqCd,eAAeA,QAAQ;AAAA,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nconst usePoint = () => {\n  _s();\n  const pointStart = localStorage.getItem(\"point\");\n  const [point, setPoint] = useState(pointStart !== null ? parseInt(pointStart) : null);\n  const countPoint = () => {\n    setPoint(point && point + 1);\n    localStorage.setItem(\"point\", String(point));\n    console.log(point);\n  };\n  return {\n    point,\n    countPoint\n  };\n};\n_s(usePoint, \"FZ32IXvPR66THJUdTwyyjN7mL5I=\");\nexport default usePoint;","map":{"version":3,"names":["useState","usePoint","_s","pointStart","localStorage","getItem","point","setPoint","parseInt","countPoint","setItem","String","console","log"],"sources":["/Users/mark/Documents/GitHub/lets-guess/src/hooks/usePoint.ts"],"sourcesContent":["import { useState } from \"react\"\nimport { CountType } from \"../types/main-page\"\n\nconst usePoint = () => {\n  const pointStart = localStorage.getItem(\"point\")\n  const [point, setPoint] = useState<CountType>(pointStart !== null ? parseInt(pointStart) : null)\n\n  const countPoint = () => {\n    setPoint(point && point + 1)\n    localStorage.setItem(\"point\", String(point))\n\n    console.log(point)\n  }\n\n  return { point, countPoint }\n}\n\nexport default usePoint"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAGhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAChD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAYG,UAAU,KAAK,IAAI,GAAGK,QAAQ,CAACL,UAAU,CAAC,GAAG,IAAI,CAAC;EAEhG,MAAMM,UAAU,GAAGA,CAAA,KAAM;IACvBF,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAC,CAAC;IAC5BF,YAAY,CAACM,OAAO,CAAC,OAAO,EAAEC,MAAM,CAACL,KAAK,CAAC,CAAC;IAE5CM,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EACpB,CAAC;EAED,OAAO;IAAEA,KAAK;IAAEG;EAAW,CAAC;AAC9B,CAAC;AAAAP,EAAA,CAZKD,QAAQ;AAcd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport useLanguage from \"./useLanguage\";\nconst useRandomWord = (lang, cate) => {\n  _s();\n  const {\n    mainLang\n  } = useLanguage(lang);\n  const findCate = mainLang.sortedCate.find(item => item.link == `/${lang}/${cate}`);\n  const words = findCate === null || findCate === void 0 ? void 0 : findCate.words;\n  const category = findCate === null || findCate === void 0 ? void 0 : findCate.category;\n  const randomWord = words === null || words === void 0 ? void 0 : words[Math.floor(Math.random() * words.length)];\n  const [word, setWord] = useState(randomWord);\n  const [skipWord, setSkipWord] = useState({\n    anim: '',\n    correction: ''\n  });\n  const changeWord = correction => {\n    const [...guessWord] = words;\n    const nextWord = words && guessWord[Math.floor(Math.random() * words.length)];\n    setSkipWord(prev => ({\n      ...prev,\n      anim: 'out'\n    }));\n    correction === 'wrong' ? setSkipWord(prev => ({\n      ...prev,\n      correction: 'wrong'\n    })) : correction === 'correct' ? setSkipWord(prev => ({\n      ...prev,\n      correction: 'correct'\n    })) : setSkipWord(prev => ({\n      ...prev,\n      correction: ''\n    }));\n    setTimeout(() => {\n      setWord(nextWord);\n      setSkipWord({\n        correction: '',\n        anim: 'in'\n      });\n    }, 600);\n    setTimeout(() => [setSkipWord({\n      correction: '',\n      anim: ''\n    })], 1200);\n  };\n  return {\n    word,\n    changeWord,\n    skipWord,\n    category\n  };\n};\n_s(useRandomWord, \"RzS2Wrm4UPNjHhLkFClx0nAvCwo=\", false, function () {\n  return [useLanguage];\n});\nexport default useRandomWord;","map":{"version":3,"names":["useState","useLanguage","useRandomWord","lang","cate","_s","mainLang","findCate","sortedCate","find","item","link","words","category","randomWord","Math","floor","random","length","word","setWord","skipWord","setSkipWord","anim","correction","changeWord","guessWord","nextWord","prev","setTimeout"],"sources":["/Users/mark/Documents/GitHub/lets-guess/src/hooks/useRandomWord.ts"],"sourcesContent":["import { useState } from \"react\"\nimport useLanguage from \"./useLanguage\"\nimport { SkipWord } from \"../types/main-page\"\n\ntype WordType = string | undefined\n\nconst useRandomWord = (lang: WordType, cate: WordType) => {\n\n  const { mainLang } = useLanguage(lang)\n\n  const findCate = mainLang.sortedCate.find(item => item.link == `/${lang}/${cate}`)\n  const words = findCate?.words\n  const category = findCate?.category\n  const randomWord = words?.[Math.floor(Math.random() * words.length)]\n\n  const [word, setWord] = useState(randomWord)\n  const [skipWord, setSkipWord] = useState<SkipWord>({\n    anim: '',\n    correction: ''\n  })\n\n  const changeWord = (correction: string) => {\n    const [...guessWord]: any = words\n    const nextWord = words && guessWord[Math.floor(Math.random() * words.length)]\n\n    setSkipWord(prev => ({...prev, anim: 'out'}))\n\n    correction === 'wrong' ? \n      setSkipWord(prev => ({...prev, correction: 'wrong'})) :\n    correction === 'correct' ?\n      setSkipWord(prev => ({...prev, correction: 'correct'})) :\n      setSkipWord(prev => ({...prev, correction: ''}))\n\n    setTimeout(() => {\n      setWord(nextWord)\n      setSkipWord({correction:'', anim: 'in'})\n    }, 600)\n\n    setTimeout(() => [\n      setSkipWord({correction:'', anim: ''})\n    ], 1200)\n  }\n\n  return { word, changeWord, skipWord, category }\n}\n\nexport default useRandomWord"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,WAAW,MAAM,eAAe;AAKvC,MAAMC,aAAa,GAAGA,CAACC,IAAc,EAAEC,IAAc,KAAK;EAAAC,EAAA;EAExD,MAAM;IAAEC;EAAS,CAAC,GAAGL,WAAW,CAACE,IAAI,CAAC;EAEtC,MAAMI,QAAQ,GAAGD,QAAQ,CAACE,UAAU,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,IAAK,IAAGR,IAAK,IAAGC,IAAK,EAAC,CAAC;EAClF,MAAMQ,KAAK,GAAGL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,KAAK;EAC7B,MAAMC,QAAQ,GAAGN,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM,QAAQ;EACnC,MAAMC,UAAU,GAAGF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;EAEpE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAACc,UAAU,CAAC;EAC5C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAW;IACjDuB,IAAI,EAAE,EAAE;IACRC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAID,UAAkB,IAAK;IACzC,MAAM,CAAC,GAAGE,SAAS,CAAM,GAAGd,KAAK;IACjC,MAAMe,QAAQ,GAAGf,KAAK,IAAIc,SAAS,CAACX,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,KAAK,CAACM,MAAM,CAAC,CAAC;IAE7EI,WAAW,CAACM,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEL,IAAI,EAAE;IAAK,CAAC,CAAC,CAAC;IAE7CC,UAAU,KAAK,OAAO,GACpBF,WAAW,CAACM,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEJ,UAAU,EAAE;IAAO,CAAC,CAAC,CAAC,GACvDA,UAAU,KAAK,SAAS,GACtBF,WAAW,CAACM,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEJ,UAAU,EAAE;IAAS,CAAC,CAAC,CAAC,GACvDF,WAAW,CAACM,IAAI,KAAK;MAAC,GAAGA,IAAI;MAAEJ,UAAU,EAAE;IAAE,CAAC,CAAC,CAAC;IAElDK,UAAU,CAAC,MAAM;MACfT,OAAO,CAACO,QAAQ,CAAC;MACjBL,WAAW,CAAC;QAACE,UAAU,EAAC,EAAE;QAAED,IAAI,EAAE;MAAI,CAAC,CAAC;IAC1C,CAAC,EAAE,GAAG,CAAC;IAEPM,UAAU,CAAC,MAAM,CACfP,WAAW,CAAC;MAACE,UAAU,EAAC,EAAE;MAAED,IAAI,EAAE;IAAE,CAAC,CAAC,CACvC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,OAAO;IAAEJ,IAAI;IAAEM,UAAU;IAAEJ,QAAQ;IAAER;EAAS,CAAC;AACjD,CAAC;AAAAR,EAAA,CAtCKH,aAAa;EAAA,QAEID,WAAW;AAAA;AAsClC,eAAeC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{useState}from\"react\";import useLanguage from\"./useLanguage\";import usePoint from\"./usePoint\";const useRandomWord=(lang,cate)=>{const{mainLang}=useLanguage(lang);const findCate=mainLang.sortedCate.find(item=>item.link==\"/\".concat(lang,\"/\").concat(cate));const words=findCate===null||findCate===void 0?void 0:findCate.words;const category=findCate===null||findCate===void 0?void 0:findCate.category;const randomWord=words===null||words===void 0?void 0:words[Math.floor(Math.random()*words.length)];const{countPoint}=usePoint();const[word,setWord]=useState(randomWord);const[skipWord,setSkipWord]=useState({anim:'',correction:''});const changeWord=correction=>{const[...guessWord]=words;const nextWord=words&&guessWord[Math.floor(Math.random()*words.length)];setSkipWord(prev=>({...prev,anim:'out'}));if(correction==='wrong'){setSkipWord(prev=>({...prev,correction:'wrong'}));}else if(correction==='correct'){setSkipWord(prev=>({...prev,correction:'correct'}));countPoint();}else{setSkipWord(prev=>({...prev,correction:''}));}setTimeout(()=>{setWord(nextWord);setSkipWord({correction:'',anim:'in'});},600);setTimeout(()=>[setSkipWord({correction:'',anim:''})],1200);};return{word,changeWord,skipWord,category};};export default useRandomWord;","map":{"version":3,"names":["useState","useLanguage","usePoint","useRandomWord","lang","cate","mainLang","findCate","sortedCate","find","item","link","concat","words","category","randomWord","Math","floor","random","length","countPoint","word","setWord","skipWord","setSkipWord","anim","correction","changeWord","guessWord","nextWord","prev","setTimeout"],"sources":["/Users/mark/Documents/GitHub/lets-guess/src/hooks/useRandomWord.ts"],"sourcesContent":["import { useState } from \"react\"\nimport useLanguage from \"./useLanguage\"\nimport { LangType, SkipWord } from \"../types/main-page\"\nimport usePoint from \"./usePoint\"\n\nconst useRandomWord = (lang: LangType, cate: LangType) => {\n\n  const { mainLang } = useLanguage(lang)\n\n  const findCate = mainLang.sortedCate.find(item => item.link == `/${lang}/${cate}`)\n  const words = findCate?.words\n  const category = findCate?.category\n  const randomWord = words?.[Math.floor(Math.random() * words.length)]\n\n  const { countPoint } = usePoint()\n  const [word, setWord] = useState(randomWord)\n  const [skipWord, setSkipWord] = useState<SkipWord>({\n    anim: '',\n    correction: ''\n  })\n\n  const changeWord = (correction: string) => {\n    const [...guessWord]: any = words\n    const nextWord = words && guessWord[Math.floor(Math.random() * words.length)]\n\n    setSkipWord(prev => ({...prev, anim: 'out'}))\n\n    if (correction === 'wrong'){ \n      setSkipWord(prev => ({...prev, correction: 'wrong'}))\n    } else if (correction === 'correct'){\n      setSkipWord(prev => ({...prev, correction: 'correct'}))\n      countPoint()\n    } else {\n      setSkipWord(prev => ({...prev, correction: ''}))\n    }\n\n    setTimeout(() => {\n      setWord(nextWord)\n      setSkipWord({correction:'', anim: 'in'})\n    }, 600)\n\n    setTimeout(() => [\n      setSkipWord({correction:'', anim: ''})\n    ], 1200)\n  }\n\n  return { word, changeWord, skipWord, category }\n}\n\nexport default useRandomWord"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,WAAW,KAAM,eAAe,CAEvC,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAEjC,KAAM,CAAAC,aAAa,CAAGA,CAACC,IAAc,CAAEC,IAAc,GAAK,CAExD,KAAM,CAAEC,QAAS,CAAC,CAAGL,WAAW,CAACG,IAAI,CAAC,CAEtC,KAAM,CAAAG,QAAQ,CAAGD,QAAQ,CAACE,UAAU,CAACC,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,MAAAC,MAAA,CAAQR,IAAI,MAAAQ,MAAA,CAAIP,IAAI,CAAE,CAAC,CAClF,KAAM,CAAAQ,KAAK,CAAGN,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEM,KAAK,CAC7B,KAAM,CAAAC,QAAQ,CAAGP,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEO,QAAQ,CACnC,KAAM,CAAAC,UAAU,CAAGF,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGL,KAAK,CAACM,MAAM,CAAC,CAAC,CAEpE,KAAM,CAAEC,UAAW,CAAC,CAAGlB,QAAQ,CAAC,CAAC,CACjC,KAAM,CAACmB,IAAI,CAAEC,OAAO,CAAC,CAAGtB,QAAQ,CAACe,UAAU,CAAC,CAC5C,KAAM,CAACQ,QAAQ,CAAEC,WAAW,CAAC,CAAGxB,QAAQ,CAAW,CACjDyB,IAAI,CAAE,EAAE,CACRC,UAAU,CAAE,EACd,CAAC,CAAC,CAEF,KAAM,CAAAC,UAAU,CAAID,UAAkB,EAAK,CACzC,KAAM,CAAC,GAAGE,SAAS,CAAM,CAAGf,KAAK,CACjC,KAAM,CAAAgB,QAAQ,CAAGhB,KAAK,EAAIe,SAAS,CAACZ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGL,KAAK,CAACM,MAAM,CAAC,CAAC,CAE7EK,WAAW,CAACM,IAAI,GAAK,CAAC,GAAGA,IAAI,CAAEL,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAE7C,GAAIC,UAAU,GAAK,OAAO,CAAC,CACzBF,WAAW,CAACM,IAAI,GAAK,CAAC,GAAGA,IAAI,CAAEJ,UAAU,CAAE,OAAO,CAAC,CAAC,CAAC,CACvD,CAAC,IAAM,IAAIA,UAAU,GAAK,SAAS,CAAC,CAClCF,WAAW,CAACM,IAAI,GAAK,CAAC,GAAGA,IAAI,CAAEJ,UAAU,CAAE,SAAS,CAAC,CAAC,CAAC,CACvDN,UAAU,CAAC,CAAC,CACd,CAAC,IAAM,CACLI,WAAW,CAACM,IAAI,GAAK,CAAC,GAAGA,IAAI,CAAEJ,UAAU,CAAE,EAAE,CAAC,CAAC,CAAC,CAClD,CAEAK,UAAU,CAAC,IAAM,CACfT,OAAO,CAACO,QAAQ,CAAC,CACjBL,WAAW,CAAC,CAACE,UAAU,CAAC,EAAE,CAAED,IAAI,CAAE,IAAI,CAAC,CAAC,CAC1C,CAAC,CAAE,GAAG,CAAC,CAEPM,UAAU,CAAC,IAAM,CACfP,WAAW,CAAC,CAACE,UAAU,CAAC,EAAE,CAAED,IAAI,CAAE,EAAE,CAAC,CAAC,CACvC,CAAE,IAAI,CAAC,CACV,CAAC,CAED,MAAO,CAAEJ,IAAI,CAAEM,UAAU,CAAEJ,QAAQ,CAAET,QAAS,CAAC,CACjD,CAAC,CAED,cAAe,CAAAX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}